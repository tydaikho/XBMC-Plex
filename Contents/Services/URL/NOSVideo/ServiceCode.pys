import re, string
from datetime import date
from BeautifulSoup import BeautifulSoup


USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'

def NormalizeURL(url):

	#Log("*********** In NOSVideo normalizeURL")

	# Deal with special providerInfo URL built up by plugin to return
	# info about this provider. For all other normal URLs, do nothing. 
	if ("providerinfo" in url):
	
		# Extract out domain.
		match = re.search("(nosvideo)", url.lower())
		if (match is None):
			return url
	
		try:
			show = Prefs["show_" + match.group(1)]
		except Exception, ex:
			show = False
			
		if (show):
			return url + "&visible=true"
		else:
			return url
			
	else:
		return url
		
def MetadataObjectForURL(url):
 
	#Log('In MetadataObjectForURL for NOSVideo (' + url + ')')
	
	return VideoClipObject(
		title = 'TheFile Redirect Page',
		summary = 'TheFile Redirect Page',
		thumb = None,
	)

def MediaObjectsForURL(url):

	#Log('In MediaObjectsForURL for NOSVideo (' + url + ')')
	
	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
		)
	]

@indirect
def PlayVideo(url):

	# Request Initial Provider page.
	try:
		#Log('Requesting ' + url)
		soup = BeautifulSoup(HTTP.Request(url).content)
		
	except Exception, ex:
		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)
	
	# Extract out these form elements if present...
	try:
		formElems = ['fname', 'id', 'op', 'referer']
		params = {}
		
		for formElem in formElems:
			formElemVal =  soup.find('input', {'name' : formElem })['value']
			params[formElem] = formElemVal
			
		params['down_script'] = '1'
		params['method_free'] = 'Continue to Video'
			
	except Exception, ex:
		return LogProviderError("Error whilst extracting out form elemnts to navigate to 2nd page.",ex)
		
	
	# Navigate to download page.
	try:
		contents = HTTP.Request(url, values=params, headers={ 'Referer': url }, cacheTime=0).content
		contents = packed_process(contents)
	except Exception, ex:
		return LogProviderError("Error whilst retrieving download page (" + url + ")", ex)
	
	
	# Get final video location from page.
	try:
	
		playlist_url = re.search('playlist=([^&]*)',contents).group(1)
		
		contents = HTTP.Request(playlist_url,headers={ 'Referer': url }, cacheTime=0).content
		soup = BeautifulSoup(contents)
		
		final_url = str(soup.find('file').contents[0])
		
	except Exception, ex:
		return LogProviderError("Error whilst retrieving final url from download page.", ex)
	
	Log(final_url)
	
	oc = ObjectContainer(
		objects = [
			VideoClipObject(
				items = [
					MediaObject(
						parts = [PartObject(key=final_url)]
					)
				]
			)
		]
	)
	
	# Might as well set a sensible user agent string.
	oc.user_agent = USER_AGENT
	
	return oc
	
def LogProviderError(msg="", ex=None):

	Log("************************** PROVIDER ERROR: " + msg)
	raise Exception(msg)
	return []

###############################################################################
# Decode PACKED Methods
###############################################################################
def unpack(matchObject):

	script = matchObject.group(0)
	
	if script is None:
		return
	
	#Log(script)
	
	# Look for substitution values.
	args_re_res = re.search("return p}\('(.*)',(\d{1,2}),(\d{1,3}),'([^']*)'.split", script)
	
	if (args_re_res is None or args_re_res.group(1) is None):
		return None
	
	val_to_unpack = args_re_res.group(1)
	key_digits_length = int(args_re_res.group(2))
	sub_vals_count = int(args_re_res.group(3))
	sub_vals = args_re_res.group(4).split('|')
	
	#Log(val_to_unpack)
	#Log(key_digits_length)
	#Log(sub_vals_count)
	#Log(sub_vals)
	
	# Create dict to map url sub keys to sub values.
	sub_vals_dict = dict()
	
	# Create list of valid digits for sub keys.
	key_digits = string.digits + string.ascii_lowercase + string.ascii_uppercase[0:key_digits_length]
	
	for index_cnt in range(0, (sub_vals_count / key_digits_length) + 1):
	
		index = index_cnt * key_digits_length
		strindex = str(index_cnt) if index_cnt > 0 else ""
		
		for cnt in range(0, key_digits_length):
			if (cnt + index < len(sub_vals) and sub_vals[cnt + index]):
				sub_vals_dict[strindex + key_digits[cnt]] = sub_vals[cnt + index]
			else:
				sub_vals_dict[strindex + key_digits[cnt]] = strindex + key_digits[cnt]
				
			#Log(strindex + key_digits[cnt] + '=' + str(cnt + index) + '=' + sub_vals_dict[strindex + key_digits[cnt]])
		
	# Sub values into string to unpack
	return (
		re.sub(
			"[0-9a-zA-Z]{1,2}",
			lambda x:  sub_vals_dict[x.group(0)],
			val_to_unpack
		)
	)
	
def packed_process(contents):

	# Look for any script element which contain a packed method.
	regEx = re.compile("eval\(function\(p,a,c,k,e,d\).*?\.split\(\'\|\'\).*?\)\)", flags=re.DOTALL)
	return regEx.sub(unpack, contents)