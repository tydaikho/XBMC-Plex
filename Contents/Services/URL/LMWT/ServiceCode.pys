import reimport urlparseimport cgiimport base64import urllib2from datetime import dateUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'PLEX_URL = "http://127.0.0.1:32400"PLUGIN_URL = PLEX_URL + "/video/lmwt"def NormalizeURL(url):	#Log("*********** In LMWT normalizeURL")	# Deal with special providerInfo URL built up by plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo.lmwt" in url):		return url + "&sources=true"			return url	def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for LMWT (' + url + ')')		if ("providerinfo" in url):		raise Exception("providerinfo URL supported only for NormalizeURL")			video = None		# Plugin should have access to info about this URL if user used plugin to launch video.	# Bad things can happen here. Still want to run rest of code if possible though...	try:		request = urllib2.Request(PLUGIN_URL + "/mediainfo/%s" % String.Encode(url))		mediainfo = JSON.ObjectFromString(urllib2.urlopen(request).read())				#Log(mediainfo)				video = VideoClipObject(			title=mediainfo['title'],			summary=mediainfo['summary'],			art=mediainfo['background'],			thumb= mediainfo['poster'],			rating = float(mediainfo['rating']),			duration=mediainfo['duration'],			year=mediainfo['year'],			originally_available_at= (				date.fromordinal(mediainfo['release_date'])				if ('release_date' in mediainfo and mediainfo['release_date'])  else None			),			genres=mediainfo['genres'],		)			except Exception, ex:		Log(ex)			#Log(video)	if video is None:			# Return bare minimum. This is never shown to users.		video = VideoClipObject(			title = 'LMWT Redirect Page',			summary = 'LMWT Redirect Page',			thumb = None,		)		return videodef MediaObjectsForURL(url):	#Log('In MediaObjectsForURL for LMWT')		if ("providerinfo" in url):		raise Exception("providerinfo URL supported only for NormalizeURL")		ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret@indirectdef PlayVideo(url):	# Extract out and break down query string of the LMWT Provider URL...	lmwt_qs_args = cgi.parse_qs(urlparse.urlparse(url).query)		# Extract out provider URL	provider_url = base64.b64decode(lmwt_qs_args['url'][0])		media_objects = URLService.MediaObjectsForURL(provider_url)		# !!!Complete Hack Alert!!!	# Roku client doesn't handle multiple indirect directives.	# So, resolve them on it's behalf in the dumbest way possible.	# This makes so many assumptions, it's safe to assume that this	# will break in a horrible way at some point.	if media_objects[0].parts[0].key.find("indirect=1") >= 0:			part_url = media_objects[0].parts[0].key		# Putlocker / Sockshare needs to know the client platform so it can do magic.		request = urllib2.Request(			PLEX_URL + part_url,			None, 			{ 'X-Plex-Client-Platform':Client.Platform }		)		response = urllib2.urlopen(request).read()		response_obj = XML.ElementFromString(response)				media_objects[0].parts[0].key = response_obj.xpath("//Part/@key")[0]			if (len(media_objects) > 0):		PlaybackStarted(url=url)			return ObjectContainer(		objects = [			VideoClipObject(				items = media_objects			)		]	)		################################################################################################### Plugin specific helper methods.def PlaybackStarted(url):		# Bad things can happen here. Let's try to be neat though....	try:		#Log(PLUGIN_URL + "/playback/" + String.Encode(url))		request = urllib2.Request(PLUGIN_URL + "/playback/" + String.Encode(url))		response = urllib2.urlopen(request)			except Exception, ex:		Log.Exception("Error whilst trying to mark item as played")		pass