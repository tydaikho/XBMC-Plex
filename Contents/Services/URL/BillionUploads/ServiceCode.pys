import re, urlparse, cgi, urllib, urllib2, cookielib, timefrom BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In BillionUploads NormalizeURL")		# Deal with special providerInfo URL built up by IceFilms plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			try:			show = Prefs["show_billionuploads"]		except Exception, ex:			show = True					if (show):			return url + "&visible=true"		else:			return url				else:		return url	def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for BillionUploads (' + url + ')')		video = VideoClipObject(		title = 'BillionUploads Redirect Page',		summary = 'BillionUploads Redirect Page',		thumb = None,	)		return video	def MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret@indirectdef PlayVideo(url):	cj = cookielib.CookieJar()	opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))	# Request initial page...	#Log("------------------------------------------------------------------------------")	#Log("Requesting: " + url)		request = urllib2.Request(url)	request.add_header('User-agent', USER_AGENT)	request.add_header('Referer', url)	response = opener.open(request)		soup = BeautifulSoup(response.read())		#Log(str(soup))		# Deal with initial page.	# Extract out these form elements...	formElems = ['op', 'id', 'method_premium', 'method_free','down_direct','rand','referer']	params = {}		for formElem in formElems:		formElemVal =  soup.find('input', {'name' : formElem })['value']		params[formElem] = formElemVal		# Extract out current secret...	try:		elem = BeautifulSoup(				urllib.unquote(re.search("decodeURIComponent\(\"([^\"]*)", str(soup)).group(1))			).find('input')				params[elem['name']] = elem['value']	except Exception, ex:		raise Exception("Unable to find page secret. Something has changed...")		# Submit form with extracted elements.	#Log("****************************************************************************")	#Log("Requesting: " + url)	#Log("Params: " + str(params))		request = urllib2.Request(url, urllib.urlencode(params))	request.add_header('User-agent', USER_AGENT)	request.add_header('Referer', url)	response = opener.open(request)		soup = BeautifulSoup(response.read())			# Collect redirect URL and return it.	encoded_url = soup.find('input',id='dl')['value']	final_url = checkwmv(checkwmv(encoded_url.split("GvaZu")[1]))		Log("final url: " + final_url)		return ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=final_url)],					)				]			)		]	)  	return retdef checkwmv(e):	t = {}	n = []	r = []	i = []	s = ""	u = [[65,91],[97,123],[48,58],[43,44],[47,48]]	for z in u:		for n in range(z[0],z[1]):			i.append(unichr(n))	for n in range(0,64):		t[i[n]] = n	for n in range(0, len(e), 72):		a = 0		f = 0		l = 0		c = 0		h = e[n:n+72]		for l in range(0, len(h)):			if h[l] not in t:				continue			f = t[h[l]];			a = (a<<6) + f			c +=6			while (c >= 8):				c = c - 8				cs = rshift(a, c) % 256				s += unichr(cs)	return sdef rshift(val, n):	return val>>n if val >= 0 else (val+0x100000000)>>ndef LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	raise Exception(msg)	return []