import re, urlparse, cgi, urllib2from datetime import datefrom BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In MovPod / DaClips / GorillaVid normalizeURL")	# Deal with special providerInfo URL built up by plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			# Extract out domain.		match = re.search("(movpod|daclips|gorillavid)", url.lower())		if (match is None):			return url			try:			show = Prefs["show_" + match.group(1)]		except Exception, ex:			show = False					if (show):			return url + "&visible=true"		else:			return url				else:		return url		def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for MovPod / DaClips (' + url + ')')		return VideoClipObject(		title = 'MovPod / DaClips / GorillaVid Redirect Page',		summary = 'MovPod / DaClips / GorillaVid Redirect Page',		thumb = None,	)def MediaObjectsForURL(url):	#Log('In MediaObjectsForURL for MovPod / DaClips (' + url + ')')		return [		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	]@indirectdef PlayVideo(url):	# Request movpod page.	try:		#Log('Requesting ' + url)		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		response = urllib2.urlopen(request)			# Collect final url and read in MovPod page.		provider_url = response.geturl()				if "404" in provider_url:			return LogProviderError('Video no longer available (404 Returned)')					#Log(provider_url)		soup = BeautifulSoup(response.read())			except Exception, ex:		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)			# Extract out these form elements if present...	elemFound = False	try:		formElems = ['op', 'id', 'fname', 'method_free', 'referer', 'usr_login']		params = {}				for formElem in formElems:			formElemVal =  soup.find('input', {'name' : formElem })['value']			params[formElem] = formElemVal			elemFound = True				except Exception, ex:		# This isn't necessarily the end of the world. Could be one of those pages where the		# video just happens to be on the 1st page.		pass	# If any of the form elements were found, then the page was a waiting	# page and we need to request the actual video page.	if (elemFound):			try:			#Log(params)			HTTP.Headers['User-agent'] = USER_AGENT			headers = { 'Referer': provider_url }			soup = BeautifulSoup(HTTP.Request(provider_url,values=params,headers=headers).content)		except Exception, ex:			return LogProviderError("Error whilst retrieving second provider page (" + provider_url + ")", ex)	# Extract out video url.	content = str(soup.contents)	file = re.search('file:\s?[\'"](http.*?)[\'"]', content)	if (file is None):				msg = 'Video URL not found on page\n'				# Look for error message on page.		err = soup.find('b', "msg_ok")		if (err != None):			msg = "  Provider message: "			msg = msg + "".join(err.findAll(text=True))				return LogProviderError(msg)			final_url = file.group(1)	Log(final_url)		oc = ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=final_url)]					)				]			)		]	)		# Might as well set a sensible user agent string.	oc.user_agent = USER_AGENT		return oc	def LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	raise Exception(msg)	return []