import re, urllib, urllib2, stringfrom datetime import datefrom BeautifulSoup import BeautifulSoupfrom htmlentitydefs import name2codepoint as n2cpimport sysUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In Sharerepo normalizeURL")	# Deal with special providerInfo URL built up by plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			# Extract out domain.		match = re.search("(sharerepo)", url.lower())				if (match):			try:				show = Prefs["show_" + match.group(1)]			except Exception, ex:				show = False							if (show):				return url + "&visible=true"			return url		def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for Sharerepo (' + url + ')')		return VideoClipObject(		title = 'Sharerepo Redirect Page',		summary = 'Sharerepo Redirect Page',		thumb = None,	)def MediaObjectsForURL(url):	#Log('In MediaObjectsForURL for Sharerepo (' + url + ')')		return [		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	]	  	return ret@indirect	def PlayVideo(url):	try:		#Log('Requesting ' + url)		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		response = urllib2.urlopen(request)			# Collect final url and read in page.		provider_url = response.geturl()				if "404" in provider_url:			return LogProviderError('Video no longer available (404 Returned)')					#Log(provider_url)		soup = BeautifulSoup(response.read())			except Exception, ex:		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)			# Extract out these form elements if present...	elemFound = False	try:		formElems = ['down_direct', 'fname', 'id', 'method_free', 'op', 'referer', 'usr_login']		params = {}				for formElem in formElems:			formElemVal =  soup.find('input', {'name' : formElem })['value']			params[formElem] = formElemVal			elemFound = True				except Exception, ex:		return LogProviderError("Error extracting out form elements from first page. This is bad! Abort!")	# Submit form by re-requesting the same page.	try:		#Log('Requesting ' + url)		#Log(params)		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		request.add_data(urllib.urlencode(params))		response = urllib2.urlopen(request)				# Read in data from response.		soup = BeautifulSoup(response.read())			except Exception, ex:		return LogProviderError("Error whilst retrieving second provider page (" + url + ")", ex)				# Extract out JS packed final video URL.	script_elems = soup.find('form', { 'name': 'F1' }).findAll('script')	elems = None	video_url = None		for script_elem in script_elems:			script = script_elem.string		if script is None:			continue					#Log(script)			# Look for substitution values.		sub_vals = re.search("\d{2},'([^']*)'.split", script)		if (sub_vals is None):			continue				elems = sub_vals.group(1).split('|')		#Log(elems)			# Look for url to substitute values into.		url_re = re.search("([0-9a-z]*://[0-9a-z]*\.[0-9a-z]*\.[0-9a-z]*\.[0-9a-z]*/([0-9a-z]*/)*[0-9a-z.\-_ ()]*)", script)		#Log(url_re.group(1))				if (url_re is None or url_re.group(1) is None):			continue				video_url = url_re.group(1)	if (elems is None or video_url is None):		return LogProviderError("Error whilst extracting out / depacking video URL elements", None)			# Create dict to map url sub keys to sub values.	alphadict = dict()	for index_cnt in range(0, 2):		index = index_cnt * len(string.digits + string.ascii_lowercase)		strindex = str(index_cnt) if index_cnt > 0 else ""		for cnt in range(0, len(string.digits + string.ascii_lowercase)):			alphadict[strindex + (string.digits + string.ascii_lowercase)[cnt]] = cnt + index		def SubElem(matchObj):		val = elems[alphadict[matchObj.group(0)]]		if (val == ""):			val = matchObj.group(0)		return val	# Sub values into url to get final url.	final_url = re.sub("[0-9a-z]{1,2}", SubElem, video_url) 	Log(final_url)		oc = ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=final_url)]					)				]			)		]	)		# Might as well set a sensible user agent string.	oc.user_agent = USER_AGENT		return oc	# Utility methods.def LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	raise Exception(msg)	return []